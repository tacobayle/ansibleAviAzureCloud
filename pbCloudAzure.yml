---
- hosts: localhost
  connection: local
  gather_facts: no


  vars_files:
    - "vars/params.yml"
    - "vars/creds.json"
    - "/home/avi/creds/credentialsAwsNicolasBayleAppAzure-api.yml"


  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Create a Cloud connector user
      avi_cloudconnectoruser:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "{{ cloudconnectoruser.name }}"
        azure_serviceprincipal:
          tenant_id: "{{ azure.tenant }}"
          application_id: "{{ azure.clientId }}"
          authentication_token: "{{ azure.secret }}"
      tags:
        - cloud


    - name: Add Azure Cloud
      avi_cloud:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        vtype: "{{ avi_cloud.vtype }}"
        license_tier: ENTERPRISE_18
        tenant_ref: /api/tenant/?name={{ avi_cloud.tenant_ref }}
        azure_configuration:
          use_managed_disks: "{{ avi_cloud.azure_configuration.use_managed_disks }}"
          resource_group: "{{ avi_cloud.resource_group }}"
          use_enhanced_ha: "{{ avi_cloud.azure_configuration.use_enhanced_ha }}"
          cloud_credentials_ref: /api/cloudconnectoruser/?name={{ avi_cloud.azure_configuration.cloud_credentials_ref }}
          use_azure_dns: "{{ avi_cloud.azure_configuration.use_azure_dns }}"
          location: "{{ avi_cloud.azure_configuration.location }}"
          network_info: "{{ avi_cloud.azure_configuration.network_info }}"
          subscription_id: "{{ azure.subscriptionId }}"
          use_standard_alb: "{{ avi_cloud.azure_configuration.use_standard_alb }}"
        name: "{{ avi_cloud.name }}"
      register: aviCloudOutput

    - set_fact:
        aviCloudUuid: "{{ aviCloudOutput.obj.uuid }}"


    - name: Wait for the cloud to be ready
      avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        http_method: get
        timeout: 300
        path: cloud-inventory
      register: statusCloud
      until: statusCloud.obj.results.1.status.state == "CLOUD_STATE_PLACEMENT_READY"
      retries: 120
      delay: 10

    - name: sleep for 20
      wait_for: timeout=20
      delegate_to: localhost
